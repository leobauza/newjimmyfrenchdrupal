<?php
/**
 * @file
 * Core Include
 */
require_once drupal_get_path('theme', 'jf') . '/jf.core.inc';

class jfmModuleBaseClass extends jfBaseClass
{

  /**
   * @method getBlockFields
   * Helper for drupals variable_get
   * @param $fields (array) Fields that combined with $delta form standarized variable names
   * @param $delta (string) The block name (machine readable)
   * @return an array of block fields
   */
  public static function getBlockFields($fields = array(), $delta = '', $uri_field = array())
  {
    $out = array();
    foreach ($fields as $key => $field) {

      if (in_array($field, $uri_field)) {
        $out[$field . '_uri'] = variable_get($delta . '_' . $field . '_uri', '');
      }

      $out[$field] = variable_get($delta . '_' . $field, '');
    }
    return $out;
  }

  /**
   * @method setBlockFields
   * Helper for drupals variable_set
   * @param $fields (array) Field names that combined with $delta form standarized variable names
   * @param $edit (array) Form submission results
   * @param $delta (string) The block name (machine readable)
   * @param $images (array) Fields that need to be saved as images (name must match $fields array)
   */
  public static function setBlockFields($fields = array(), $edit, $delta = '', $images = array())
  {

    $idPairs = array();

    foreach ($fields as $key => $field) {

      // manage images if needed
      if (in_array($field, $images)) {

        $currentId = variable_get($delta . '_' . $field, 0);
        $idPairs[$field] = array($currentId, $edit[$delta . '_' . $field]);

      } else {

        // if there is a value (filtered html) save the value
        if (isset($edit[$delta . '_' . $field]['value'])) {
          variable_set($delta . '_' . $field, $edit[$delta . '_' . $field]['value']);
        } else {
          variable_set($delta . '_' . $field, $edit[$delta . '_' . $field]);
        }

      }

    }

    // Save any images
    // self::saveFile($idPairs, $delta);
    self::saveFiles($idPairs, $delta);

  }


  /**
   * @method saveFiles
   * Save and delete managed files
   * @param $idPairs (array) Field name key containing file id's
   * @param $delta (string) The block name (machine readable)
   */
  public static function saveFiles ($idPairs, $delta)
  {

    foreach ($idPairs as $field => $ids) {

      $currentFileId = $ids[0];
      $newFileId = $ids[1];

      if ($currentFileId === 0 && $newFileId) {
        //there is a new file and there wasn't one before
        $file_id = $newFileId;
      } elseif ($currentFileId !== 0 && $newFileId !== $currentFileId ) {
        //the file has changed but there was a file here before
        //so delete the old file...
        $toDelete = file_load($currentFileId);
        $file_id = $newFileId;
      } elseif ($newFileId === $currentFileId) {
        //the file is the same
        $file_id = $currentFileId;
      } else {
        //the file went back to being no file so id is 0
        //if there is a current file then delete it!
        $toDelete = file_load($currentFileId);
        $file_id = 0;
      }

      if (isset($toDelete)) {
        file_delete($toDelete, TRUE);
      }

      $file = file_load($file_id);
      $file_path = (isset($file->uri))? $file->uri : '';

      if (!empty($file)) {
        if ($currentFileId === 0 && $newFileId) {
          //first time you upload a file
          $file->status = FILE_STATUS_PERMANENT;
          file_save($file);
          file_usage_add($file, 'file', 'file', $file->fid);
        } elseif ($currentFileId !== 0 && $newFileId !== $currentFileId ) {
          $file->status = FILE_STATUS_PERMANENT;
          file_save($file);
          file_usage_add($file, 'file', 'file', $file->fid);
        }
      }

      variable_set($delta . '_' . $field, $file_id);
      variable_set($delta . '_' . $field . '_uri', $file_path);

    }

  }

  /**
   * @method getOneTweet
   * Get a single tweet from the tweet view generated by the tweets module
   * @return a single tweet
   */
  public static function getOneTweet ()
  {

    $view = self::getView('tweets', 'block', NULL, 1);
    $oneTweet = array(
      'screen_name' => $view[0]->twitter_account_screen_name,
      'profile_image' => $view[0]->twitter_account_profile_image_url,
      'text' => self::addLinksToTweet($view[0]->twitter_text),
      'time' => gmdate("F j, Y", $view[0]->twitter_created_time),
      'id' => $view[0]->twitter_id,
    );
    return $oneTweet;

  }

  /**
   * @method makeBlockForm
   * Make a configuration form for a block
   * @param $fields (array) Field names that combined with $delta form standarized variable names
   * @param $delta (string) The block name (machine readable)
   * @return a form configuration array
   */
  public static function makeBlockForm ($fields = array(), $delta, $upload_location = 'public://misc/')
  {

    $form = array();

    foreach ($fields as $name => $type) {
      $nameParts = explode('|', $name);
      if ($type === 'managed_file') {
        $form[$delta . '_' . $nameParts[0]] = array(
          '#type' => $type,
          '#title' => t($nameParts[1]),
          '#default_value' => variable_get($delta . '_' . $nameParts[0]),
          '#upload_location' => $upload_location,
        );
      } else {
        $form[$delta . '_' . $nameParts[0]] = array(
          '#type' => $type,
          '#title' => t($nameParts[1]),
          '#default_value' => variable_get($delta . '_' . $nameParts[0]),
        );
      }

    }

    return $form;

  }


}